@using Saweat.Application.Handlers.Commands.Bookings
@inject IMediator mediator
@inject DialogService dialogService

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>
<RadzenTemplateForm TItem="Booking" Data="@_booking" Submit="@OnSubmit">
    <RadzenHeading Size="H1" Text="Solicitar" />
    <p />
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Nombre" />
        </div>
        <div class="col-md-8" >
            <RadzenTextBox @bind-Value="@_booking.CustomerName" Name="CustomerName" style="width: 100%;"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Telefono" />
        </div>
        <div class="col-md-8">
            <RadzenTextBox @bind-Value="@_booking.CustomerPhone" Name="CustomerPhone"style="width: 100%;" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Email" />
        </div>
        <div class="col-md-8">
            <RadzenTextBox @bind-Value="@_booking.CustomerEmail" Name="CustomerEmail"style="width: 100%;" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Fecha y hora" />
        </div>
        <div class="col-md-8">
            <RadzenDatePicker  @bind-Value="@_booking.StartDate" TValue="DateTime" ShowTime="true" ShowSeconds="false" HoursStep="1" MinutesStep="5" SecondsStep="10" DateFormat="dd/MM/yyyy HH:mm" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 align-items-center d-flex">
            <RadzenLabel Text="Nº Comensales" />
        </div>
        <div class="col-md-8">
            <RadzenNumeric  @bind-Value="@_booking.PeopleAmount" TValue="int" />
        </div>
    </div>
    <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Button" Text="Solicitar" Click="@OnSubmit" />
</RadzenTemplateForm>
@code {
    private Booking _booking = new();

    protected override async Task OnInitializedAsync()
    {
        _booking.StartDate = DateTime.Now;
        await base.OnInitializedAsync();
    }

    private async Task OnSubmit()
    {
        var response = await mediator.Send(new UpdateBookingRequest { Booking = _booking});
        if (response.Success)
        {
            var message = $"Su reserva ha quedado registrada con el codigo {response.Data.Code}, anotelo para futuros usos.";
            await dialogService.OpenAsync<BookingMessage>("Aviso", new Dictionary<string, object> { { "Message", message } });

            _booking = new();
            _booking.StartDate = DateTime.Now;
        }
    } 
}
