@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor
@using MediatR
@using Saweat.Application.Handlers.Commands.Users
@using Saweat.Application.Handlers.Queries.Users
@using Saweat.Domain.Entities

<RadzenProfileMenu>
     <ChildContent>
         <RadzenProfileMenuItem Path="profile" Icon="settings" Text="Perfil" /> 
         <RadzenProfileMenuItem Text="Logout" Value="Logout" Icon="power_settings_new" />
     </ChildContent>
    <Template>
        <RadzenLabel Text="@CurrentUser.Name">
        </RadzenLabel>
        <RadzenLabel Text="@CurrentUser.Lastnames">
        </RadzenLabel>
        <RadzenImage Path="@(Picture)" style="border-radius: 16px; height: 32px; width: 32px">
        </RadzenImage>
    </Template>
</RadzenProfileMenu>

@code
{
    [Inject]
    public IMediator Mediator { get; set; }

    [Inject] 
    public AuthenticationStateProvider AuthState { get; set; }

    public ApplicationUser CurrentUser { get; set; } = new ApplicationUser();
    
    public string Picture = "";
    
    private AuthenticationState _currentState;

    protected override async Task OnInitializedAsync()
    {
        _currentState = await AuthState.GetAuthenticationStateAsync();
        var authUser = _currentState.User;

        var email = authUser.Identity.Name ?? string.Empty;

        Picture = authUser.Claims
            .Where(c => c.Type.Equals("picture"))
            .Select(c => c.Value)
            .FirstOrDefault() ?? string.Empty;

        var user = await Mediator.Send(new GetUserByEmailRequest{Email = email});
        if (user.Data is null)
        {
            await Mediator.Send(new CreateUserRequest{User = new ApplicationUser{Email = email}});
            CurrentUser.Name = email;
            return;
        }
        user = await Mediator.Send(new GetUserByEmailRequest{Email = email});
        CurrentUser = user.Data;
    }

}
