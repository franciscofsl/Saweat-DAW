@page "/bookings"
@inject IMediator mediator
@inject DialogService dialogService
@attribute [Authorize]

<RadzenHeading Size="H1" Text="Reservas"></RadzenHeading>

<RadzenScheduler @ref="@scheduler" style="height: 768px;"
                 SlotRender="@OnSlotRender"
                 TItem="Booking"
                 Data="@bookings"
                 StartProperty="StartDate"
                 EndProperty="EndDate"
                 TextProperty="CustomerName"
                 SelectedIndex="2"
                 AppointmentRender="@OnBookingRender"
                 AppointmentSelect="@OnAppointmentSelect" >
    <RadzenDayView/>
    <RadzenWeekView/>
    <RadzenMonthView/>
</RadzenScheduler>

@code {
    private RadzenScheduler<Booking> scheduler;
    private IList<Booking> bookings;
    
    protected override async Task OnInitializedAsync()
    {
        await OnRefreshBookings();
    }

    private async Task OnRefreshBookings()
    {
        var response = await mediator.Send(new GetBookingsByStateRequest());
        bookings = response.Data.ToList();
    }

    private static void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    private static void OnBookingRender(SchedulerAppointmentRenderEventArgs<Booking> args)
    {
        if (args.Data.State is BookingState.Pending)
        {
            args.Attributes["style"] = "background: #F7DC6F; color:black;";
        }
        if (args.Data.State is BookingState.Approved)
        {
            args.Attributes["style"] = "background: #82E0AA; color:black;";
        }
        if (args.Data.State is BookingState.Cancel)
        {
            args.Attributes["style"] = "background: #F1948A; color:black;";
        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Booking> args)
    {
        await dialogService.OpenAsync<BookingModify>("Modificar Reserva", new Dictionary<string, object> { { "Booking", args.Data } });
        await scheduler.Reload();
    }
}