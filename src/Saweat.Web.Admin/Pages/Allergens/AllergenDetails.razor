@page "/allergens/{AllergenId:int}"
@using Saweat.Domain.Common
@using Saweat.Application.Handlers.Queries.Allergens
@using Saweat.Application.Handlers.Commands.Allergens
@inject NavigationManager navigationManager
@inject IMediator Mediator

<RadzenHeading Size="H1" Text="@_description"/>

<style>
    form .row { margin-bottom: 16px; }
</style>

<ErrorControl Errors="@_errors"/>

<RadzenTemplateForm TItem="Allergen" Data="@_allergen" Submit="@OnSubmit">
    <RadzenButton ButtonStyle="ButtonStyle.Success" ButtonType="ButtonType.Button" Text="Guardar" Click="@OnSubmit"/>
    <RadzenButton ButtonType="ButtonType.Button" Text="Cancelar" Click="@OnGoToAllergensSite"/>
    <p/>
    <div class="row">
        <div class="col-md-2 align-items-center d-flex">
            <RadzenLabel Text="Codigo"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox Name="AllergenCode" @bind-Value="@_allergen.AllergenCode"/>
        </div>
    </div>

    <div class="row">
        <div class="col-md-2 align-items-center d-flex">
            <RadzenLabel Text="Nombre"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox Name="Name" @bind-Value="@_allergen.Name"/>
        </div>
    </div>

    <div class="row">
        <div class="col-md-2 align-items-center d-flex">
            <RadzenLabel Text="Icono"/>
        </div>
        <div class="col-md-8">
            <RadzenTextBox Name="Icon" @bind-Value="@_allergen.Icon"/>
        </div>
    </div>

</RadzenTemplateForm>

@code {

    private Allergen _allergen = new Allergen();

    private IEnumerable<string> _errors;

    private string _description;

    [Parameter]
    public int AllergenId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _description = "Nuevo alergeno";
        if (AllergenId > 0)
        {
            var response = await Mediator.Send(new GetAllergenByIdRequest(AllergenId));
            _allergen = response.Data;
            if (_allergen == null)
            {
                _allergen = new Allergen();
            }
            else
            {
                _description = _allergen.Name;
            }
        }
    }

    private async Task OnSubmit()
    {
        var response = await SaveAllergen();
        if (response.ValidationErrors.Any())
        {
            _errors = response.ValidationErrors;
            return;
        }
        await OnGoToAllergensSite();
    }

    private async Task<Response<Allergen>> SaveAllergen()
    {
        return await Mediator.Send(new UpdateAllergenRequest
        {
            Allergen = _allergen
        });
    }

    private async Task OnGoToAllergensSite()
    {
        navigationManager.NavigateTo("/allergens");
    }

}